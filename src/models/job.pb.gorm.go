// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: job.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type JobORM struct {
	CreatedTimestamp int64
	EndBlockNumber   int64
	Hash             string `gorm:"primary_key"`
	NumClaims        int64
	StartBlockNumber int64
}

// TableName overrides the default tablename generated by GORM
func (JobORM) TableName() string {
	return "jobs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Job) ToORM(ctx context.Context) (JobORM, error) {
	to := JobORM{}
	var err error
	if prehook, ok := interface{}(m).(JobWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Hash = m.Hash
	to.CreatedTimestamp = m.CreatedTimestamp
	to.StartBlockNumber = m.StartBlockNumber
	to.EndBlockNumber = m.EndBlockNumber
	to.NumClaims = m.NumClaims
	if posthook, ok := interface{}(m).(JobWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *JobORM) ToPB(ctx context.Context) (Job, error) {
	to := Job{}
	var err error
	if prehook, ok := interface{}(m).(JobWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Hash = m.Hash
	to.CreatedTimestamp = m.CreatedTimestamp
	to.StartBlockNumber = m.StartBlockNumber
	to.EndBlockNumber = m.EndBlockNumber
	to.NumClaims = m.NumClaims
	if posthook, ok := interface{}(m).(JobWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Job the arg will be the target, the caller the one being converted from

// JobBeforeToORM called before default ToORM code
type JobWithBeforeToORM interface {
	BeforeToORM(context.Context, *JobORM) error
}

// JobAfterToORM called after default ToORM code
type JobWithAfterToORM interface {
	AfterToORM(context.Context, *JobORM) error
}

// JobBeforeToPB called before default ToPB code
type JobWithBeforeToPB interface {
	BeforeToPB(context.Context, *Job) error
}

// JobAfterToPB called after default ToPB code
type JobWithAfterToPB interface {
	AfterToPB(context.Context, *Job) error
}

type ClaimORM struct {
	ClaimIndex       int64 `gorm:"primary_key"`
	EndBlockNumber   int64
	IsClaimed        bool
	IsCompleted      bool
	IsHead           bool
	JobHash          string `gorm:"primary_key"`
	StartBlockNumber int64
}

// TableName overrides the default tablename generated by GORM
func (ClaimORM) TableName() string {
	return "claims"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Claim) ToORM(ctx context.Context) (ClaimORM, error) {
	to := ClaimORM{}
	var err error
	if prehook, ok := interface{}(m).(ClaimWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.JobHash = m.JobHash
	to.ClaimIndex = m.ClaimIndex
	to.StartBlockNumber = m.StartBlockNumber
	to.EndBlockNumber = m.EndBlockNumber
	to.IsClaimed = m.IsClaimed
	to.IsCompleted = m.IsCompleted
	to.IsHead = m.IsHead
	if posthook, ok := interface{}(m).(ClaimWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ClaimORM) ToPB(ctx context.Context) (Claim, error) {
	to := Claim{}
	var err error
	if prehook, ok := interface{}(m).(ClaimWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.JobHash = m.JobHash
	to.ClaimIndex = m.ClaimIndex
	to.StartBlockNumber = m.StartBlockNumber
	to.EndBlockNumber = m.EndBlockNumber
	to.IsClaimed = m.IsClaimed
	to.IsCompleted = m.IsCompleted
	to.IsHead = m.IsHead
	if posthook, ok := interface{}(m).(ClaimWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Claim the arg will be the target, the caller the one being converted from

// ClaimBeforeToORM called before default ToORM code
type ClaimWithBeforeToORM interface {
	BeforeToORM(context.Context, *ClaimORM) error
}

// ClaimAfterToORM called after default ToORM code
type ClaimWithAfterToORM interface {
	AfterToORM(context.Context, *ClaimORM) error
}

// ClaimBeforeToPB called before default ToPB code
type ClaimWithBeforeToPB interface {
	BeforeToPB(context.Context, *Claim) error
}

// ClaimAfterToPB called after default ToPB code
type ClaimWithAfterToPB interface {
	AfterToPB(context.Context, *Claim) error
}

// DefaultCreateJob executes a basic gorm create call
func DefaultCreateJob(ctx context.Context, in *Job, db *gorm1.DB) (*Job, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type JobORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type JobORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskJob patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskJob(ctx context.Context, patchee *Job, patcher *Job, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Job, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Hash" {
			patchee.Hash = patcher.Hash
			continue
		}
		if f == prefix+"CreatedTimestamp" {
			patchee.CreatedTimestamp = patcher.CreatedTimestamp
			continue
		}
		if f == prefix+"StartBlockNumber" {
			patchee.StartBlockNumber = patcher.StartBlockNumber
			continue
		}
		if f == prefix+"EndBlockNumber" {
			patchee.EndBlockNumber = patcher.EndBlockNumber
			continue
		}
		if f == prefix+"NumClaims" {
			patchee.NumClaims = patcher.NumClaims
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListJob executes a gorm list call
func DefaultListJob(ctx context.Context, db *gorm1.DB) ([]*Job, error) {
	in := Job{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &JobORM{}, &Job{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("hash")
	ormResponse := []JobORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Job{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type JobORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type JobORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type JobORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]JobORM) error
}

// DefaultCreateClaim executes a basic gorm create call
func DefaultCreateClaim(ctx context.Context, in *Claim, db *gorm1.DB) (*Claim, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ClaimORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ClaimORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ClaimORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ClaimORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskClaim patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskClaim(ctx context.Context, patchee *Claim, patcher *Claim, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Claim, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"JobHash" {
			patchee.JobHash = patcher.JobHash
			continue
		}
		if f == prefix+"ClaimIndex" {
			patchee.ClaimIndex = patcher.ClaimIndex
			continue
		}
		if f == prefix+"StartBlockNumber" {
			patchee.StartBlockNumber = patcher.StartBlockNumber
			continue
		}
		if f == prefix+"EndBlockNumber" {
			patchee.EndBlockNumber = patcher.EndBlockNumber
			continue
		}
		if f == prefix+"IsClaimed" {
			patchee.IsClaimed = patcher.IsClaimed
			continue
		}
		if f == prefix+"IsCompleted" {
			patchee.IsCompleted = patcher.IsCompleted
			continue
		}
		if f == prefix+"IsHead" {
			patchee.IsHead = patcher.IsHead
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListClaim executes a gorm list call
func DefaultListClaim(ctx context.Context, db *gorm1.DB) ([]*Claim, error) {
	in := Claim{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ClaimORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ClaimORM{}, &Claim{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ClaimORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("claim_index")
	ormResponse := []ClaimORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ClaimORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Claim{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ClaimORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ClaimORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ClaimORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ClaimORM) error
}
